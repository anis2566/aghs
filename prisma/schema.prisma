// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  Admin
  Moderator
  User
}

enum ServiceType {
  Breakfast
  TeaBreak
  Lunch
  Gift
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  password      String?         @db.Text
  role          Role            @default(User)
  
  accounts      Account[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}


model Application {
  id            String          @id @default(cuid())
  appId         String
  name          String
  phone         String
  email         String?
  batch         Int
  imageUrl      String
  isVerified    Boolean         @default(false)
  isPaid        Boolean         @default(false)

  service       Service[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model Service {
  id            String          @id @default(cuid())
  type          ServiceType
  isCompleted   Boolean         @default(false)

  appId         String         
  application   Application     @relation(fields: [appId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}